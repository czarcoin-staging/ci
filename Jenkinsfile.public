pipeline {
    agent {
        dockerfile {
            filename 'Dockerfile.jenkins'
            args '-u root:root -v "/tmp/gomod":/go/pkg/mod'
        }
    }
    stages {
        stage('Build') {
            steps {
                checkout scm

                sh 'mkdir .build'

                // make a backup of the mod file in case, for later linting
                sh 'cp go.mod .build/go.mod.orig'
                // download dependencies
                sh 'go mod download'

                sh 'go install -v -race ./...'
                sh 'make install-sim'

                sh 'service postgresql start'
            }
        }

        stage('Verification') {
            parallel {
                stage('Lint') {
                    steps {
                        sh 'go run ./scripts/check-copyright.go'
                        sh 'go run ./scripts/check-imports.go'
                        sh 'go run ./scripts/protobuf.go --protoc=$HOME/protoc/bin/protoc lint'
                        sh 'protolock status'
                        sh 'bash ./scripts/check-dbx-version.sh'
                        sh 'golangci-lint -j=4 run'
                        sh 'go run scripts/check-mod-tidy.go -mod .build/go.mod.orig'
                    }
                }

                stage('Tests') {
                    environment {
                        STORJ_POSTGRES_TEST = 'postgres://postgres@localhost/teststorj?sslmode=disable'
                    }
                    steps {
                        sh 'psql -U postgres -c \'alter system set max_connections = 1000;\''
                        sh 'psql -U postgres -c \'create database teststorj;\''
                        sh 'go run scripts/use-ports.go -from 1024 -to 10000 &'
                        sh 'go test -vet=off -timeout 9m -json -race ./... 2>&1 | tee .build/tests.json | go run ./scripts/xunit.go -out .build/tests.xml'
                        sh 'go run scripts/check-clean-directory.go'
                    }

                    post {
                        always {
                            sh script: 'cat .build/tests.json | tparse -all -top -slow 100', returnStatus: true
                            archiveArtifacts artifacts: '.build/tests.json'
                            junit '.build/tests.xml'
                        }
                    }
                }

                stage('Integration') {
                    environment {
                        // use different hostname to avoid port conflicts
                        STORJ_NETWORK_HOST4 = '127.0.0.2'
                        STORJ_NETWORK_HOST6 = '127.0.0.2'
                    }

                    steps {
                        sh 'make test-sim'
                    }
                }
            }
        }
    }

    post {
        always {
            sh "chmod -R 777 ." // ensure Jenkins agent can delete the working directory
            deleteDir()
        }
    }
}